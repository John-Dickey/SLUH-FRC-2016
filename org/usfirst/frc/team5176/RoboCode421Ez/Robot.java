// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team5176.RoboCode421Ez;

import org.usfirst.frc.team5176.RoboCode421Ez.commands.*;
import org.usfirst.frc.team5176.RoboCode421Ez.subsystems.*;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Relay.Value;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    public static final double ARBITRARY_COMMAND_LENGTH = .1; //fuck off
    public static final short MAX_PICKUP_ARMS_POSITION = 6969;//TODO get the real position
    public static final short MIN_PICKUP_ARMS_POSITION = -6969;//TODO get the real position
    public static final short OPTIMAL_PICKUP_ARMS_POSITION = 0;//TODO get the real position
    public static final int THE_POSITION_OF_CATAPULT_ARM = 6699;//TODO get the real position
    public static final int UNLOADED_POSITION_OF_THE_CATAPULT = 6969; //TODO get the real position
    public static String currentCamera;//for camera switch command
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static CatapultArm catapultArm;
    public static PickupArms pickupArms;
    public static ScissorLift scissorLift;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CameraServer server;
    public static NetworkTable table;
    public static double[] defaultValue;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        catapultArm = new CatapultArm();
        pickupArms = new PickupArms();
        scissorLift = new ScissorLift();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        server = CameraServer.getInstance();
        server.setQuality(25);
        server.startAutomaticCapture("cam0");
        currentCamera = "cam0";
        RobotMap.driveTrainUltrasonicM.setAutomaticMode(true);
        RobotMap.driveTrainUltrasonicL.setAutomaticMode(true);
        RobotMap.driveTrainUltrasonicR.setAutomaticMode(true);
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommandGroup();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        table = NetworkTable.getTable("GRIP/myContoursReport");
        defaultValue = new double[0];
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	 RobotMap.driveTrainUltrasonicM.setAutomaticMode(true);
         RobotMap.driveTrainUltrasonicL.setAutomaticMode(true);
         RobotMap.driveTrainUltrasonicR.setAutomaticMode(true);
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        RobotMap.driveTrainUltrasonicM.setAutomaticMode(true);
        RobotMap.driveTrainUltrasonicL.setAutomaticMode(true);
        RobotMap.driveTrainUltrasonicR.setAutomaticMode(true);
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
      //  if(!server.isAutoCaptureStarted())//if the camera stops, make it work , pls ;~;
        //	server.startAutomaticCapture("cam0");
        driveTrain.dankMemes(oi.pilotJoystick);//awesome arcade drive method name
        SmartDashboard.putNumber("Ultrasonic1", RobotMap.driveTrainUltrasonicM.getRangeInches());
        SmartDashboard.putNumber("Ultrasonic2", RobotMap.driveTrainUltrasonicL.getRangeInches());
        SmartDashboard.putNumber("Ultrasonic3", RobotMap.driveTrainUltrasonicR.getRangeInches());
        SmartDashboard.putNumber("RawEncoder", RobotMap.catapultArmArmEncoder.getValue());
        if(oi.coJoystick.getRawAxis(1) > 0.5)
        	RobotMap.pickupArmsVerticalArm.set(-.5);
        else if(oi.coJoystick.getRawAxis(1) < -0.5)
        	RobotMap.pickupArmsVerticalArm.set(.5);
        else
        	Robot.pickupArms.stopVertically();
        if(oi.coJoystick.getPOV(0) == 180)
        	Robot.pickupArms.spinArmsOut();
        else if(oi.coJoystick.getPOV(0) == 0)
        	Robot.pickupArms.spinArmsIn();
        else
        	Robot.pickupArms.stopSpinning();
        
        if(oi.pilotJoystick.getRawButton(1))
        	Robot.catapultArm.stopClamp();
        /*
         * Hard
         * Hard
         * Code
         * Fuck
         * You
         * John
         */
        //Mad cause bad
        /*
        if(oi.coJoystick.getRawButton(7))
        	Robot.catapultArm.tighten();
        
        else if(oi.coJoystick.getRawButton(8))
        	Robot.catapultArm.loosen();
        else
        	Robot.catapultArm.stopMotor();
        */
        
        SmartDashboard.putNumber("Arm position in degrees", Robot.catapultArm.returnVal());
        double[] centX = table.getNumberArray("centerX", defaultValue);
        if(oi.pilotJoystick.getRawButton(9) /*&& RobotMap.driveTrainUltrasonicM.getRangeInches() > 77.5 && RobotMap.driveTrainUltrasonicM.getRangeInches() < 82.5*/) {//arbitrary distance values       	
        	SmartDashboard.putBoolean("button9", true);
        	for(double xxx : centX)
        	{
        		DriverStation.reportError(xxx + " ", false);
        		final int TESTNUM = 165;
        		if(xxx > TESTNUM+25) {
        			Robot.driveTrain.set(-.3, 0);
        			Timer.delay(.5);
        			Robot.driveTrain.kidRanIntoTheStreet();
        		} else if(xxx > TESTNUM+5) {
        			Robot.driveTrain.set(-.15, 0);
        			Timer.delay(.5);
        			Robot.driveTrain.kidRanIntoTheStreet();
        		} else if(xxx < TESTNUM-25) {
        			Robot.driveTrain.set(0, .3);
        			Timer.delay(.5);
        			Robot.driveTrain.kidRanIntoTheStreet();
        		} else if(xxx < TESTNUM-5) {
        			Robot.driveTrain.set(0, .15);
        			Timer.delay(.5);
        			Robot.driveTrain.kidRanIntoTheStreet();
        		}
        	}
        }
        if (oi.pilotJoystick.getRawButton(8)) {
        	double distance = RobotMap.driveTrainUltrasonicM.getRangeInches();
        	if (distance < 77.5) {
        		Robot.driveTrain.set(.2 + (80 - distance) * 0.01, -.2 - (80 - distance) * 0.01);
        	} else {
        		Robot.driveTrain.set(-.2 - (distance - 80) * 0.01, .2 + (distance - 80) * 0.01);
        	}
        }
        if(!oi.pilotJoystick.getRawButton(9))
        	SmartDashboard.putBoolean("button9", false);
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
        driveTrain.dankMemes(oi.pilotJoystick);
        double[] centX = table.getNumberArray("centerX", defaultValue);
        if(oi.pilotJoystick.getRawButton(9)) {       	
        SmartDashboard.putBoolean("button9", true);
        for(double xxx : centX)
        {
        	DriverStation.reportError(xxx + " ", false);
        	if(xxx > 140) {
        		Robot.driveTrain.set(-.3, 0);
        		Timer.delay(.1);
        		Robot.driveTrain.kidRanIntoTheStreet();
        	}
        		//new TurnLeft();
        	else if(xxx < 120) {
        		Robot.driveTrain.set(0, .3);
        		//new TurnRight();
        		Timer.delay(.1);
        		Robot.driveTrain.kidRanIntoTheStreet();
        	}
        }
        }
        if(!oi.pilotJoystick.getRawButton(9))
        	SmartDashboard.putBoolean("button9", false);
    }
}
