// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team5176.RoboCode421Ez;

import edu.wpi.first.wpilibj.AnalogInput;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.VictorSP;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainFrontLeftMotor;
    public static SpeedController driveTrainRearLeftMotor;
    public static SpeedController driveTrainFrontRightMotor;
    public static SpeedController driveTrainRearRightMotor;
    public static RobotDrive driveTrainRobotDrive;
    public static Ultrasonic driveTrainUltrasonicM;
    public static Ultrasonic driveTrainUltrasonicR;
    public static Ultrasonic driveTrainUltrasonicL;
    
    public static SpeedController catapultArmCatapultMotor;
    public static Encoder catapultArmArmEncoder;
    public static Relay theTrigger;
    public static SpeedController pickupArmsVerticalArm;
    public static Relay pickupArmsLeftArm;
    public static Relay pickupArmsRightArm;
    public static SpeedController scissorLiftScissorMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AnalogInput pickupPot;
    public static DigitalInput catapultArmsLimitSwitch;
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainFrontLeftMotor = new VictorSP(5);
        LiveWindow.addActuator("Drive Train", "Front Left Motor", (VictorSP) driveTrainFrontLeftMotor);
        
        driveTrainRearLeftMotor = new VictorSP(4);
        LiveWindow.addActuator("Drive Train", "Rear Left Motor", (VictorSP) driveTrainRearLeftMotor);
        
        driveTrainFrontRightMotor = new VictorSP(0);
        LiveWindow.addActuator("Drive Train", "Front Right Motor", (VictorSP) driveTrainFrontRightMotor);
        
        driveTrainRearRightMotor = new VictorSP(2);
        LiveWindow.addActuator("Drive Train", "Rear Right Motor", (VictorSP) driveTrainRearRightMotor);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainFrontLeftMotor, driveTrainRearLeftMotor,
              driveTrainFrontRightMotor, driveTrainRearRightMotor);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        driveTrainUltrasonicM = new Ultrasonic(0, 1);
        LiveWindow.addSensor("Drive Train", "Ultrasonic", driveTrainUltrasonicM);
        driveTrainUltrasonicL = new Ultrasonic(2, 3);
        LiveWindow.addSensor("Drive Train", "Ultrasonic", driveTrainUltrasonicL);
        driveTrainUltrasonicR = new Ultrasonic(4, 5);
        LiveWindow.addSensor("Drive Train", "Ultrasonic", driveTrainUltrasonicR);
        
        catapultArmCatapultMotor = new VictorSP(6);
        LiveWindow.addActuator("Catapult Arm", "Catapult Motor", (VictorSP) catapultArmCatapultMotor);
        //Change to analog input?

        catapultArmArmEncoder = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("Catapult Arm", "Arm Encoder", catapultArmArmEncoder);
        catapultArmArmEncoder.setDistancePerPulse(1.0);
        catapultArmArmEncoder.setPIDSourceType(PIDSourceType.kRate);
        theTrigger = new Relay(1);
        LiveWindow.addActuator("Catapult Arm", "Clamp", theTrigger);
        
        pickupArmsVerticalArm = new VictorSP(1);
        LiveWindow.addActuator("Pickup Arms", "Vertical Arm", (VictorSP) pickupArmsVerticalArm);
        
        pickupArmsLeftArm = new Relay(2);
        LiveWindow.addActuator("Pickup Arms", "LeftArm", pickupArmsLeftArm);
        
        pickupArmsRightArm = new Relay(0);
        LiveWindow.addActuator("Pickup Arms", "RightArm", pickupArmsRightArm);
        
        scissorLiftScissorMotor = new VictorSP(3);
        LiveWindow.addActuator("Scissor Lift", "Scissor Motor", (VictorSP) scissorLiftScissorMotor);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        catapultArmsLimitSwitch = new DigitalInput(9);
        pickupPot = new AnalogInput(2);
    }
}
