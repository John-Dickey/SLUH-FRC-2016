// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team5176.RoboCode421Ez.subsystems;

import org.usfirst.frc.team5176.RoboCode421Ez.Robot;
import org.usfirst.frc.team5176.RoboCode421Ez.RobotMap;
import org.usfirst.frc.team5176.RoboCode421Ez.commands.*;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Relay.Direction;
import edu.wpi.first.wpilibj.Relay.Value;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class PickupArms extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController verticalArm = RobotMap.pickupArmsVerticalArm;
    private final Relay leftArm = RobotMap.pickupArmsLeftArm;
    private final Relay rightArm = RobotMap.pickupArmsRightArm;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogInput thePot = RobotMap.pickupPot;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    //No idea if this is the right direction \_('~')_/
    public void spinArmsIn() {
    	leftArm.set(Value.kForward);
    	rightArm.set(Value.kReverse);
    }
    public void spinArmsOut() {
    	leftArm.set(Value.kReverse);
    	rightArm.set(Value.kForward);
    }
    public void stopSpinning()
    {
    	leftArm.set(Value.kOff);
    	rightArm.set(Value.kOff);
    }
    
    public void raiseArms() {
    	verticalArm.set(.2);
    }
    
    public void lowerArms() {
		verticalArm.set(-.2);
    }
    
    public void stopVertically() {
		verticalArm.set(0);
    }
    public boolean areWeGoodQuestionMark()
    {
    	if(thePot.getValue() == 420)//I had no choice
    		blazeIt();
    	if(thePot.getValue() > Robot.MAX_PICKUP_ARMS_POSITION || thePot.getValue() < Robot.MIN_PICKUP_ARMS_POSITION)
    		return false;//everything is NOT all good
    	else
    		return true;//all good :)
    }
    private void blazeIt()
    {
    	DriverStation.reportError("420 blaze it", false);
    }
    
    public void optimizing()
    {
    	if(thePot.getValue() > Robot.OPTIMAL_PICKUP_ARMS_POSITION - 2 && thePot.getValue() < Robot.OPTIMAL_PICKUP_ARMS_POSITION + 2) {
    	    verticalArm.set(0);
    	}
    	
    	else{
    		if(thePot.getValue() > Robot.OPTIMAL_PICKUP_ARMS_POSITION) {
    			verticalArm.set(-.1);
    		}
    		else {
    			verticalArm.set(.1);
    		}
    	}
    }
    	
    	
}

